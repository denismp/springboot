# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://localhost:3306/finra?useSSL=false

# Username and password
#spring.datasource.username = finra
#spring.datasource.password = finra

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# -----------------------
# POSTGRESQL DATABASE CONFIGURATION
# -----------------------
#spring.postgresql.datasource.url=jdbc:postgresql://localhost:5432/book_db
#spring.postgresql.datasource.username=postgres
#spring.postgresql.datasource.password=postgres
#spring.postgresql.datasource.driver-class-name=org.postgresql.Driver

# ------------------------------
# MYSQL DATABASE CONFIGURATION
# ------------------------------
spring.mysql.datasource.url=jdbc:mysql://localhost:3306/finra?autoReconnect=true&useSSL=false
spring.mysql.datasource.username=finra
spring.mysql.datasource.password=finra
spring.mysql.datasource.driver-class-name=com.mysql.jdbc.Driver

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
