package com.example.config;

import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jndi.JndiTemplate;
import org.springframework.orm.hibernate4.HibernateTemplate;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import java.util.Properties;

import javax.naming.NamingException;

import org.apache.log4j.Logger;


@Configuration
@EnableAspectJAutoProxy
@EnableTransactionManagement(proxyTargetClass=true)
//@ComponentScan({"com.denis.myapp.entity", "com.denis.myapp.dao",
//	"com.denis.myapp.service"})
@ComponentScan({"com.example.*", "com.example.service"})
@PropertySource("classpath:application.properties")
public class RepositoryConfig {
	private final Logger log = Logger.getLogger (this.getClass());
	
	@Autowired
	private Environment environment;
	
	/**
	 * Bean to set up the local session factory for the database.
	 * @return LocalSessionFactoryBean
	 */
	@Bean
	@Primary
	public LocalSessionFactoryBean sessionFactory() {
		log.info("sessionFactory(): called to set up the LocalSessionFactoryBean for the database sessions.");
		LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
		sessionFactory.setDataSource(dataSource());
		
		// Has to include where Entities (@Entity) are defined.
		sessionFactory.setPackagesToScan(new String[] { 
				"com.example",
				"com.example.dao",
				"com.example.entity",
				"com.example.service"
		});
		sessionFactory.setAnnotatedPackages(new String[] {
				"com.example", 
				"com.example.dao",
				"com.example.entity",
				"com.example.service"
		});
		sessionFactory.setHibernateProperties(hibernateProperties());
		return sessionFactory;
	}
	
	/**
	 * Bean for hibernate templates, which are useful for calling stored procedures.
	 * @return HibernateTemplate
	 */
	@Bean
	@Primary
	@Autowired
	public HibernateTemplate hibernateTemplate(){
		log.info("hibernateTemplate(): called...");
		HibernateTemplate hibernateTemplate = new HibernateTemplate(sessionFactory().getObject());
		return hibernateTemplate;
	}
	
	/**
	 * Bean to create the datasource.
	 */
	@Bean
	@Primary
	@ConfigurationProperties(prefix="app.datasource.finra")
	public DataSource dataSource(){
		log.info("dataSource(): called...");

		DataSource dataSource = null;
		JndiTemplate jndi = new JndiTemplate();
		try {
			Object obj = jndi.lookup("java:comp/env/jdbc/FinraDB");
			dataSource = (DataSource) obj;
		} catch (NamingException e) {
			System.out.println("NamingException for java:comp/env/jdbc/FinraDB");
			e.printStackTrace();
		}
		
		return dataSource;
	}
	
	private Properties hibernateProperties() {
		Properties properties = new Properties();
		properties.put("hibernate.dialect", environment.getRequiredProperty("hibernate.dialect"));
		properties.put("hibernate.show_sql", environment.getRequiredProperty("hibernate.show_sql"));
		properties.put("hibernate.format_sql", environment.getRequiredProperty("hibernate.format_sql"));
		properties.put("hibernate.hbm2ddl.auto", environment.getRequiredProperty("hibernate.createorupdate"));
		properties.put("hibernate.event.merge.entity_copy_observer", "allow");
		return properties;        
	}
	/**
	 * Bean to create the HibernateTransactionManager
	 * @param SessionFactory
	 * @return HibernateTransactionManager
	 */
	@Bean
	@Primary
	@Autowired
	public HibernateTransactionManager transactionManager() {
		log.info("transactionManager(): called...");
		HibernateTransactionManager txManager = new HibernateTransactionManager();
		txManager.setSessionFactory(sessionFactory().getObject());
		return txManager;
	}
}

